classes and objects
class is a blue print of an object . It provides state and attribute for an object.
object carries the state and attribute provided by the class.
it occupies space . hence it is called real time entity.

objects- are defined using 
1. new keyword
2. object literal
3. object constructor

new keyword-it creates an empty space for the object.
it refers the object space to the object reference variable.
sytax to create an object- 
let Var_name = new ClassName();
Constructor- It loads all the properties into the object space created by the new keyword .
Assigns the values to the properties.


Brower object model and document object model
BOM -stands for Browser object model- It provides certain properties which are used to interact with the browser. 

Features- 1.  window object- it represents the current working window of the browser.
 2. It provides certain functions to interact with the current window.
 3. key functions are - window.alert();
 window.prompt();

 DOM- stands for document object model. 
 it represents the current html document.that is displayed on the browser,
 it represents the html in the form of tree called as DOM tree.
 it provides certain topics and functions to interact with the current html document.
 example- document.getElementById();
 document.getElementsByclassName();
 document.querySelector();
 
 DOM tree-

  javascript- It is a light weight interpreted and dynamic programming language.
  used for web development.

 dynaimic programming language means we need not specify the data type of a variable explicitly.
 In languages such as java we need to specify explicitly. 

where as in javascript the data type of the variable depends on the value that is stored.
javascript runs on the browser making it a client side programming language.
Every browser will have a js engine to execute javascript code.
ex- chrome will have v8 Engine, spider monkey, firefox , js core.

Eg- Chrome= v8,
   firefox = spidermonkey
   safari = jscore

   ECMA Script- It is a scripting lamguage specification standardize by ECMA international.
  it's serve as a foundation for javascript, it defines the syntax semantics and co features of the language.   

  ES Version -6
  introduced significant features like classes , modules arrow function, promises and destructuring.
  
  variables- variables are used to store  data, in js we use 3 keywords to create variables var, let, and const.
  this can be redeclare and reassigned. They are function scope meaning it can be accesed anywhere within the function(if declared outside a function they would be global scope)

  let- They can not be redeclared but can be reassigned. 
  They are block scope that is accessable only inside the specified block.

  const-they can not be redeclared not reassigned. they are block scope like let.




  // create a arrow function which returns product of two numbers
  // create  a function expression which returns the remainder of a number when divided by 10.

  let product = (a,b) => {
   return a*b;
  };
  let p= product (4,5);
  console.log(p);

  let  divide = function (a,b =10){
   return a % b;
  };
  let d = divide(158);
  console.log(d);






  scope of a variable-
  global scope- 
  1. variable declared outside any function  belongs to the global scope. it is accessible anywhere inside the code.
  2. variable declared using var get attached to the window object.

  function scope: It is also known as local scope. 
  variables declared inside a function are scoped only to that function and can only be accessed inside it.

  block scope- this variables are declared inside a block and are limited only to that block.
  lexical scope  also called as closures.
  functions in javascript are lixically scoped meaning they can access variables from their parent scope.this is used in closures where an inner function has access to variables from its outer function.


closure- when a function is defined inside another function it closes over  variables in its outer scope that is even if the outer functions finishes execution (mentioning return keyword)
the inner function still has access to the variables of outer function.
usecases-
1.data encapsulation- 
2. function factory
asynchronous callbacks.


create nested functions add and substract where inner function subtracts 10 from the sum.
write a function that multiplies two numbers and gives the remainder of the result divided by 5

  function factory
closures can be used to create multiple functions with shared behaviours but customized data.



// implement closures where an outer function returns an innerfunc and the inner function return another innerfunction.

//outer -> childfunc1 - > childfunc2



objects- an object is a collection of key value pairs , key is unique and value vcan be anything such as string, number, object, function etc.
they behave as real time entities meaning they occupy space.
object creation using object literals.

1. assign an object to a variable. 
2.  Object.create()- creates a new object using a prototype.
3.  using new keyword - using constructors , class , new keyword to create objects.
4. Looping through objects can be done using  i>for... in loop
ii> Object.keys() iii> Object.Values() 


Assignment-difference between 

Objects.freez()

Objects.freez()
this function will not allow modifying objects attributes or add new attributes for the object.

write a note on object.seal()- 

study

object destructuring- 
It is a feature that allows to extract properties from the objects and assign to variables in a readable manner.
The variables names must be same as the property names of the object.

updating values using destructuring is done as  
const {name:"Alice in technologies" } = company;

closure and lexical scope.
arrays= they are collection of multiple types of data.
in javascript arrays can store multiple types of data that is  string, number, object.

arrays function- 
push- adds elements to the end of the array
pop-remove elements from the end of the array.
unshift- add elements to the beginning of the array.
shift- removes the first element from the array.
splice- adds or remove or replace from a specific index.
slice- extract a portion of the array into a new array.


PROJECT SLIDE PRESENTATION -

1. INTRODUCTION ABOUT CSS AND html
2. WHY WE NEED WEB TECH?
3. fRONT end
4. fULL STACK.
5. RESPONSIVE DESIGN.


18TH AND 19TH october- project presentation.



document.createElement()-creates a new html element  which later needs to be appended to the parent. example- 
<!--document.createElement("div")
creating a new div
-->

<!--document.appendChild()-->

appends a node as the last child of the parent node.


assignment- add an event listener  where on clicking a button an image appears on the document in use createElement(img)

set attribute and get attribute.

given an array of objects where arr = [
  {
    name: "Sachin"
    age: 50
  },
  { name:"virat",
    age:30



  },

  {
    name: "Dhoni",
    age:40
  }
]



write a js function which displays the object data in the form of table.




javascript is a single threaded programming language which means it can execute only one operation at a time.
This leads to two types of execution.
1. synchronous programming
2. asynchronous programming
synchronous operations- 
 Tasks are executed one after the other.Each operation must wait for the operation(previous) to be executed | completed.
  This can lead to  delays if a task is taking much time.
  key characteristics-
  1. Blocking execution  i.e long running operations like  network request, file reading will block the subsequent code.
  2. code is executed sequentially  in order that it appears.



  promise chaining and promise-
  JSON- it stands for javascript object notation. It is used to represent 
  javascript object in a string format. 
  It is useful for data inter operability. Objects can not be transferred form one end point to the other.
  to convert object into json we use json.stringify()
  and to convert json to object we use json.parse()

  async and await -   they are introduced in ES6 . they are used to simplify working with promises, providing more readable and synchronus looking way to handle promises.

  async keyword is uded to declare any function as asynchronous which ensures the function will always return a promise. 
  await keyword is used inside async function to pause the execution of the function untill the promise is resolved.
  error handling  is simplier using try catch block compared to then and catch.
Advantages of async and await-
1.Improved readability.
2.simplier syntax and error handling.

disadvantages- 

1. blocking execution
2. error handling may become complex in large flows.
