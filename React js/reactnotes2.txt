props-parameters passed to a component.

state-  an object which holds key :value

event handling in react js with respect to class compoent.
1. binding event handlers-  in class components event handlers  must be bound to the curent instance( this keyword)
2. this is done because "this" is not bounded to the object of the class and the function automatically.
3.Binding is done inside this constructor.
this.handleClick = this.handleClick.bind(this)
4. this is the most common approach to bind the event handler.
5. bind(this): is a method in javascript  that is used to set the value of "this" inside a function to a specific object.
6. doing bind(this) is necessary in class component because the value of "this" can change depending on where the function is called.
7. using bind(this) ensures that the method always refers to the current component.

second way of binding using arrow functions-
 since arrow functions are related to variables binding happens lexically because of which we need not bind the event handler in the constructor.
 
 event handling with respect to functional components- In functional components event handling is comparatively easy as the handler function is simply called when the event is trigerred. 
 the handler function being a pert of functional component itself gets binded automatically.

 form handling -the inputs given in form elements will be captured by the property called target of the event object. therefore we need to  de construct the target attribute as const  { form_input_name, value} = event.target
 or let. 

 example -
 handleChange =(event) => {


 }









 where name captures the value given for the name attribute of the input element and value captures the input given in the input field.

 to call the handler function  for form inputs use onChange attribute.

 useState() Hook -
 hooks are functions that allows us to use class component features inside functional component.

 useState() is a function that allows the use of state object inside functional component.
 it provided 2 properties - state variable, function to update state variable.
 ex- const[color, setColor] = useState("red");
 here color is state variable and setColor is function to update state. and red is default value.


props drilling it is a concept where props(properties) are passed down from parent component to child component and subsequent deeper levels.
It is essential to pass the data through multiple levels even if one deepest child requires the data.

disadvantages of props drilling -
 1. code maintenance - As component hierarchy depens it becomes hard to maintain since every intermediate component as to handle props that it doesn't use.
 2. unnecessary re-renders. when the props changes at the top most level every component in the chain will re-render even if only one component is actually using the data.
 3.reduce redeabality- reading and understanding the code becoms hard as children level depens.

 Avoiding props drilling-  React context api.
 state management libraries such as redux.

 parent child communication -
 it refers to the  ways in which data can be passed from parent to child and vice versa.
 parent to child- data is passed from parent to child using props.The child component can use these props to render or handle behaviour. 
 child to parent- the parent component passess a call back function as a prop to the child.the child can call these function to trigger an action or send data to the parent.

context API- It provides a way to share data accross multiple components without having to pass props manually through every level.
when to use context api -multiple components needs access to global data such as user authentication, user data etc.

how the context api works - 
1. create a context using React.createContext()
2. Provide context - use the Provider component to wrap a prt of your component tree , making the context data available to any child component.
3. consuming context- components that need context data can use the context using 
Context.Consumer() or React.useContext() hook